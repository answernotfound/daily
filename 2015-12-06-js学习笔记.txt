第1章  JavaScript概述
前端工程师必须掌握的3大技能：
  描述网页内容的HTML
  描述网页样式的CSS
  描述网页行为的JavaScript
可以通过在HTML文件立写一个<script>标签来嵌入JavaScript代码。
通过console.log()来向浏览器的控制台做简单的输出演示。
Firefox插件Firebug来运行小段js代码。

JavaScript语言核心
// 所有在双斜线之后的内容都属于注释

// 变量是表示值的一个符号名字
// 变量是通过var关键字声明的
var x;		// 声明一个变量

// 值可以通过等号赋值给变量
x = 0;		// 现在变量x的值为0
x		// => 0;通过变量获取其值

// JavaScript支持多种数据类型
x = 1;			// 数字
x = 0.01;		// 整数和实数共用一种数据类型
x = "hello world";	// 由双引号内的文本构成的字符串
x = 'JavaScript';	// 单引号内的文本同样构成字符串
x = true;		// 布尔值
x = false;		// 另一个布尔值
x = null;		// null是一个特殊的值，意思是“空”
x = undefined; 		// undefined和null非常类似

// JavaScript中最重要的类型就是对象
// 对象是名/值对的集合，或字符串到值映射的集合
var book = {		// 对象是由花括号括起来的
    topic: "JavaScript",// 属性"topic"的值是"JavaScript"
    fat: true		// 属性"fat"的值是true
};			// 右花括号标记了对象的结束

// 通过"."或"[]"来访问对象属性
book.topic		// => "JavaScript"
book["fat"] 		// => true:另外一种获取属性的方法
book.author = "Flanagan";	// 通过赋值创建一个新属性
book.contents = {};	// {} 是一个空对象，它没有属性

// JavaScript同样支持数组(以数字为索引的列表)
var primes = [2, 3, 5, 7];	// 拥有4个值的数组，由"["和"]"划定界限
primes[0]	// => 2: 数组中的第一个元素（索引为0）
primes.length	// => 4: 数组中的元素个数
primes[primes.length-1];	// => 7: 数组的最后一个元素
primes[4] = 9;	// 通过赋值来添加新元素
primes[4] = 11;	// 或通过赋值来改变已有的元素
var empty = [];	// []是空数组，它具有0个元素
empty.length	// -> 0

// 数组和对象中都可以包含另一个数组或对象：
var points = [		// 具有两个元素的数组
    {x: 0, y: 0},	// 每个元素都是一个对象
    {x: 1, y: 1}
];
var data = {		// 一个包含两个属性的对象
    trial1: [[1, 2], [3, 4]],	// 每一个属性都是数组
    trial2: [[2, 3], [4, 5]]	// 数组的元素也是数组
};

使用运算符(operator)：
// 运算符用作于操作数，生成一个新的值
// 最常见的是算数运算符
3 + 2			// => 5: 加法
3 - 2			// => 1: 减法
3 * 2			// => 6: 乘法
3 / 2			// => 1.5: 除法
points[1].x - points[0].x	// => 1: 能复杂的操作也能照常工作
"3" + "2"		// => "32": +可以完成假发运算也可以作字符串连接

var count = 0;	// 定义一个变量
count++；	// 自增1
count--;	// 自减1
count += 2;	// 自增2：和"count = count + 2;"写法一样
count *= 3;	// 自乘3：和"count = count * 3;"写法一样
count 		// => 6: 变量名本身也是一个表达式

// 相等关系运算符是用来判断两值是否相等
// 不等、大于、小于运算符的运算结果是true或false
var x = 2, y = 3;	// 这里的等号是赋值的意思
x == y	//=>false
x != y	//=>true
x < y 	//=>true
x <= y	//=>true
x > y	//=>false
x >= y	//=>false
"two" == "three"	//=>false
"two" > "three"	//=>true:"tw"在字母表中的索引大于"th"

// 逻辑运算符是对布尔值的合并或求反
(x == 2) && (y == 3)	//=>true
(x > 3) || (y < 3)	//=>false
!(x == y)		//=>true

函数是带有名字(named)和参数的JavaScript代码段，可以一次定义多次调用。
// 函数是一段带有参数的JavaScript代码段，可以多次调用
function plus1(x) {	// 定义了一个名为plus1的函数，带有参数x
    return x + 1;	// 返回一个比传入参数大的值
}		// 函数的代码块是由花括号包裹起来的部分
plus1(y)	// => 4: y为3，调用函数的结果为 3+1

var square = function(x) {	// 函数是一种值，可以付给变量
    return x * x;		// 计算函数的值
};				// 分好标识了赋值语句的结束
square(plus1(y))	// => 16: 在一个表达式中调用两个函数

当将函数和对象合写在一起时，函数就变成了"方法"(method)：
// 当函数付给对象的属性，我们称为
// "方法"，所有的JavaScript对象都含有方法
var a = [];	// 创建一个空数组
a.push(1, 2, 3);// push()方法向数组中添加元素
a.reverse();	// 另一个方法，将数组元素的次序反转

// 我们也可以定义自己的方法，"this"关键字是对定义方法
// 的对象的引用；这里的例子是上文中提到的两个点位置信息的数组
points.dist = function() {      // 定义一个方法用来计算两点之间的距离
    var p1 = this[0];         	// 通过this获得对当前数组的引用
    var p2 = this[1];        	// 并取得调用的数组前两个元素
    var a = p2.x - p1.x;        // X轴坐标上的距离
    var b = p2.y - p1.y;    	// Y轴坐标上的距离
    return Math.sqrt(a * a + b * b);	// 勾股定理
};
points.dist()			// => 1.414: 求得两个点之间的距离

一些控制语句的例子
// 这些JavaScript语句使用的语法包含条件判断和循环
// 使用了类似C,C++,Java和其他语言的语法
function abs(x) {
    if(x >= 0) {
        return x;
    }
    else {
        return - x;
    }
}
function factorial(n) {
    var product = 1;
    while (n > 1) {
        product *= n;
        n --;
    }
    return product;
}
print(factorial(4));
function factorial2(n) {
    var i, product = 1;
    for(i=2; i <= n; i++)
        product *= i;
    return product;
}
print(factorial2(5));

JavaScript是一种面向对象的语言。
这里有一个简单的示例，这段代码展示了如何在JavaScript中定义一个类来表示2D平面集合中的点。这个类实力化的对象拥有一个名为r()的方法，用来计算该点到原点的距离：

// 定义一个构造函数以初始化一个新的Point对象
function Point(x, y) {
    this.x = x;
    this.y = y;
}

// 使用new关键字和构造函数来创建一个实例
var p = new Point(1, 1);

// 通过给构造函数的prototype对象赋值
// 来给Point对象定义方法
Point.prototype.r = function() {
    return Math.sqrt(
        this.x * this.x +
        this.y * this.y);
};

// Point的实例对象p(以及所有的Point实例对象)继承了方法r()
print(p.r());	// => 1.4142135623730951

客户端JavaScript
JavaScript代码可以通过<script>标签来嵌入到HTML文件中：
<html>
<head>
<script src="library.js"></script> <!-- 引入一个JavaScript库 -->
</head>
<body>
<script>
// 在这里编写嵌入到HTML文件中的JavaScript代码
</script>
<p>here is more HTML.</p>
</body>
</html>

第14章讲解Web浏览器端脚本技术，并涵盖客户端JavaScript中的一些重要全局函数，例如：
function moveon() {
    // 通过弹出一个对话框来询问用户一个问题
    var answer = confirm("准备好了吗？");
    // 单机“确定”按钮，浏览器会加载一个新页面
    if (answer) window.location = "http://taobao.com";
}
// 在1分钟（6万毫秒）后执行定义的这个函数
setTimeout(moveon, 60000);

第15章的内容——通过脚本来操纵HTML文档内容。它将展示如何选取特定的HTML元素、如何给HTML元素设置属性、如何修改元素内容，以及如何给文档添加新节点。这里的示例函数展示了如何查找和修改基本文档的内容：
// 在document中的一个指定的区域输出调试消息
// 如果document不存在这样一个区域，则创建一个
function debug(msg) {
    // 通过查看HTML元素id属性来查找文档的调试部分
    var log = document.getElementById("debuglog");

    // 如果这个元素不存在，则创建一个
    if(!log) {
        log = document.createElement("div");    // 创建一个新的<div>元素
        log.id = "debuglog";    // 给这个元素的HTML id赋值
        log.innerHTML = "<h1>Debug log</h1>";   // 定义初始内容
        document.body.appendChild(log);     // 将其天价到文档的末尾
    }
    // 将消息包装在<pre>中，并添加至log中
    var pre = document.createElement("pre");    // 创建<pre>标签
    var text = document.createTextNode(msg);    // 将msg包装在文本节点中
    pre.appendChild(text);              // 将文本添加至<pre>
    log.appendChild(pre);               // 将<pre>添加至log
}

第16章讲述如何使用JavaScript来进行CSS样式操作，CSS样式定义了内容的展示方式。这通常会使用到HTML元素的stylr和class属性：
function hide(e, reflow) {	// 通过JavaScript操纵样式来隐藏元素e
    if(reflow) {		// 如果第二个参数是true
        e.style.display = "none";// 隐藏这个元素，其所占用的空间也随之消失
    }
    else {			// 否则
        e.style.visibility = "hidden";	// 将e隐藏，但是保留其所占用的空间
    }
}
function higlight(e) {	// 通过设置CSS类来高亮显示e
    // 简单的定义或追加HTML类属性
    // 这里假设CSS样式表中已经有"hilite"类的定义
    if(!e.className) e.className = "hilite";
    else e.className += "hilite";
}

可以通过JavaScript来操纵Web浏览器中的HTML内容和文档的CSS样式。
也可以通过事件处理程序(event handler)来定义文档的行为。
事件处理程序是一个在浏览器中注册的JavaScript函数，当特定类型的事件发生时浏览器便调用这个函数。
定义事件处理程序最简单的方法是，给HTML的以"on"为前缀的属性绑定一个回调。当写一个简单的测试程序时，最实用的方法就是给"onclick"处理程序绑定回调。假定已经将上文中的debug()和hide()两个函数保存至名为debug.js和hide.js的文件中，那么就可以写一个简单的HTML测试文件，来给<button>元素的onclick属性指定一个事件处理程序：
<script src="debug.js"></script>
<script src="hide.js"></script>
Hello
<button onclick="hide(this,true); debug('hide button 1');">Hide1</button>
<button onclick="hide(this); debug('hide button 2');">Hide2</button>
World

下面这些客户端JavaScript代码用到了事件，它给一个很重要的事件——"load"事件注册了一个事件处理程序。同时，也展示了注册"click"事件处理函数更高级的一种方法：
// "load"事件只有在文档加载完成后才会触发
// 通常需要等到load事件发生后才开始执行JavaScript代码
window.onload = function() {	// 当文档加载完成时执行这里的代码
    //  找到文档中所有的<img>标签
    var images = document.getElementsByTagName("img");

    // 遍历images，给每个节点的"click"事件添加事件处理程序
    // 在点击图片的时候将图片隐藏
    for(var i = 0; i < images.length; i++) {
        var image = images[i];
        if (image.addEventListener)     // 注册事件处理程序的另一种方法
            image.addEventListener("click", hide, false);
        else	// 兼容IE8及以前的版本
            image.attachEvent("onclick", hide);
    }
    // 这便是上面注册的事件处理函数
    function hide(event) { event.target.style.visibility = "hidden"; }
}

第19章介绍jQuery库。
jQuery定义了一套灵巧易用的API，用来操纵文档内容、样式和行为。
jQuery经过了完整的测试，在所有现代主流的浏览器，甚至是IE6这种早期浏览器都可以照常运行。
jQuery代码非常抑郁识别，因为它充分利用了一个名为$()的函数。这里用jQuery重写了上文中提到的debug()函数：
function debug(msg) {
    var log = $("#debuglog");	// 找到要显示msg的元素
    if(log.length == 0) {	// 如果不存在则创建之
        log = $("<div id='debuglog'><h1>Debug Log</h1></div>");
        log.appendTo(document.body);	// 并将其追加到body里
    }
    log.append($("<pre/>").text(msg));	// 将msg包装在<pre>中，再追加到log里
}

第18章讲解如何使用JavaScript来发起HTTP请求。
第20章描述数据存储的机制以及客户端应用中的会话状态的保持。
第21章 <canvas> 图形绘制。
第22章 HTML5提供的新一代Web应用API。

示例：一个JavaScript贷款计算器

